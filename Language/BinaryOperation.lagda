------------------------------------------------------------------------
--
-- Binary operations used within the language
-- 
------------------------------------------------------------------------

\begin{code}
{-# OPTIONS --safe #-}
module AbstractMachines.Language.BinaryOperation where

open import Data.Nat using (‚Ñï; _‚â°·µá_; _<·µá_; _‚â§·µá_; _+_; _‚à∏_; _*_)
open import Data.Bool using (true; false; not) renaming (Bool to ùîπ)
open import Relation.Nullary using (¬¨_)
open import Function using (_‚àò_)
\end{code}

------------------------------------------------------------------------

<Arithmetic-operator-definition>
\begin{code}
data ArithmeticOp : Set where
  + : ArithmeticOp
  ‚à∏ : ArithmeticOp
  * : ArithmeticOp
\end{code}

\begin{code}
‚ü¶_‚üß·µÉ : ArithmeticOp ‚Üí (‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï)
‚ü¶ + ‚üß·µÉ = _+_
‚ü¶ ‚à∏ ‚üß·µÉ = _‚à∏_
‚ü¶ * ‚üß·µÉ = _*_
\end{code}

<Compare-operator-definition>
\begin{code}
data CompareOp : Set where
  ‚âà : CompareOp
  ‚â† : CompareOp
  < : CompareOp
  ‚â§ : CompareOp
  > : CompareOp
  ‚â• : CompareOp
\end{code}

<Mapping-compare-operations>
\begin{code}
‚ü¶_‚üß·∂ú : CompareOp ‚Üí (‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ)
‚ü¶ ‚âà ‚üß·∂ú = Œª a b ‚Üí a ‚â°·µá b
‚ü¶ ‚â† ‚üß·∂ú = Œª a b ‚Üí not (a ‚â°·µá b)
‚ü¶ < ‚üß·∂ú = Œª a b ‚Üí a <·µá b
‚ü¶ ‚â§ ‚üß·∂ú = Œª a b ‚Üí a ‚â§·µá b
‚ü¶ > ‚üß·∂ú = Œª a b ‚Üí not (a ‚â§·µá b)
‚ü¶ ‚â• ‚üß·∂ú = Œª a b ‚Üí b ‚â§·µá a
\end{code}
